USERCREATE OR REPLACE FUNCTION
  USER_LOGIN(
    IN P_USERNAME VARCHAR,
    IN P_PASSWORD VARCHAR,
    OUT P_USER_ALLOWED BOOLEAN,
    OUT P_USER_ID INT,
    OUT P_USER_NAME VARCHAR,
    OUT P_USER_USERNAME VARCHAR,
    OUT P_ACCESS_NAME VARCHAR,
    OUT P_ROLE_NAME VARCHAR
  )
  LANGUAGE PLPGSQL STABLE
  SECURITY DEFINER
AS $USER_LOGIN$
  BEGIN
    SELECT INTO
      P_USER_ALLOWED,
      P_USER_ID,
      P_USER_NAME,
      P_USER_USERNAME,
      P_ACCESS_NAME,
      P_ROLE_NAME
      CASE WHEN (U.USERNAME IS NOT NULL AND U.PASSWORD IS NOT NULL)
        THEN TRUE
        ELSE FALSE
      END AS USER_ALLOWED,
      U.ID,
      U.NAME,
      U.USERNAME,
      A.NAME,
      R.NAME
    FROM
      PUBLIC.USER U
      INNER JOIN PUBLIC.ACCESS A ON
        A.ID = U.ACCESS_ID
      INNER JOIN PUBLIC.ROLE R ON
        R.ID = U.ROLE_ID
    WHERE
      U.USERNAME = P_USERNAME AND
      U.PASSWORD = PUBLIC.CRYPT(P_PASSWORD, U.PASSWORD);
  END;
$USER_LOGIN$;

CREATE OR REPLACE FUNCTION
  LOG_USER_UPDATE()
  RETURNS TRIGGER
  LANGUAGE PLPGSQL VOLATILE
AS $USER_UPDATE_STAMPS$
  BEGIN
    IF
      OLD.PASSWORD IS DISTINCT FROM NEW.PASSWORD
    THEN
      NEW.PASSWORDUPDATEDON := NOW();
    END IF;
    NEW.LASTUPDATEON := NOW();
    RETURN NEW;
  END;
$USER_UPDATE_STAMPS$;

CREATE TRIGGER TRIGGER_USER_UPDATE
  BEFORE UPDATE ON
    USER
  FOR EACH ROW
    EXECUTE PROCEDURE LOG_USER_UPDATE();

CREATE OR REPLACE FUNCTION
  LOG_USER_INSERT()
  RETURNS TRIGGER
  LANGUAGE PLPGSQL VOLATILE
AS $USER_INSERT_STAMPS$
  BEGIN
    NEW.PASSWORDUPDATEDON := NOW();
    NEW.CREATEDON:= NOW();
    NEW.LASTUPDATEON := NOW();
    NEW.ACTIVE := 1;
    RETURN NEW;
  END;
$USER_INSERT_STAMPS$;

CREATE TRIGGER TRIGGER_USER_INSERT
  BEFORE INSERT ON
    USER
  FOR EACH ROW
    EXECUTE PROCEDURE LOG_USER_INSERT();

CREATE OR REPLACE FUNCTION
  LOG_UPDATE_STAMPS()
  RETURNS TRIGGER
  LANGUAGE PLPGSQL VOLATILE
AS $LOG_UPDATE_STAMPS$
  BEGIN
    NEW.LASTUPDATEON := NOW();
    RETURN NEW;
  END;
$LOG_UPDATE_STAMPS$;

CREATE TRIGGER TRIGGER_UPDATE
  BEFORE UPDATE ON
    ROLE
  FOR EACH ROW
    EXECUTE PROCEDURE LOG_UPDATE_STAMPS();

CREATE TRIGGER TRIGGER_UPDATE
  BEFORE UPDATE ON
    ACCESS
  FOR EACH ROW
    EXECUTE PROCEDURE LOG_UPDATE_STAMPS();

CREATE TRIGGER TRIGGER_UPDATE
  BEFORE UPDATE ON
    SUB_CATEGORY
  FOR EACH ROW
    EXECUTE PROCEDURE LOG_UPDATE_STAMPS();

CREATE TRIGGER TRIGGER_UPDATE
  BEFORE UPDATE ON
    CATEGORY
  FOR EACH ROW
    EXECUTE PROCEDURE LOG_UPDATE_STAMPS();

CREATE TRIGGER TRIGGER_UPDATE
  BEFORE UPDATE ON
    CATEGORY_DETAILS
  FOR EACH ROW
    EXECUTE PROCEDURE LOG_UPDATE_STAMPS();

CREATE TRIGGER TRIGGER_UPDATE
  BEFORE UPDATE ON
    SOURCE
  FOR EACH ROW
    EXECUTE PROCEDURE LOG_UPDATE_STAMPS();

CREATE TRIGGER TRIGGER_UPDATE
  BEFORE UPDATE ON
    QUESTION
  FOR EACH ROW
    EXECUTE PROCEDURE LOG_UPDATE_STAMPS();

CREATE TRIGGER TRIGGER_UPDATE
  BEFORE UPDATE ON
    ANSWER
  FOR EACH ROW
    EXECUTE PROCEDURE LOG_UPDATE_STAMPS();

CREATE TRIGGER TRIGGER_UPDATE
  BEFORE UPDATE ON
    SUB_QUESTION
  FOR EACH ROW
    EXECUTE PROCEDURE LOG_UPDATE_STAMPS();

CREATE TRIGGER TRIGGER_UPDATE
  BEFORE UPDATE ON
    QUESTION_DETAILS
  FOR EACH ROW
    EXECUTE PROCEDURE LOG_UPDATE_STAMPS();

CREATE TRIGGER TRIGGER_UPDATE
  BEFORE UPDATE ON
    ARTICLE
  FOR EACH ROW
    EXECUTE PROCEDURE LOG_UPDATE_STAMPS();

CREATE TRIGGER TRIGGER_UPDATE
  BEFORE UPDATE ON
    REQUESTOR
  FOR EACH ROW
    EXECUTE PROCEDURE LOG_UPDATE_STAMPS();

CREATE TRIGGER TRIGGER_UPDATE
  BEFORE UPDATE ON
    CONTACT
  FOR EACH ROW
    EXECUTE PROCEDURE LOG_UPDATE_STAMPS();

CREATE TRIGGER TRIGGER_UPDATE
  BEFORE UPDATE ON
    KNOWLEDGE
  FOR EACH ROW
    EXECUTE PROCEDURE LOG_UPDATE_STAMPS();

--INSERT TRIGGER & FUNCTION
CREATE OR REPLACE FUNCTION
  LOG_INSERT_STAMPS()
  RETURNS TRIGGER
  LANGUAGE PLPGSQL VOLATILE
AS $LOG_INSERT_STAMPS$
  BEGIN
    NEW.CREATEDON:= NOW();
    NEW.LASTUPDATEON := NOW();
    NEW.ACTIVE := 1;
    RETURN NEW;
  END;
$LOG_INSERT_STAMPS$;

CREATE TRIGGER TRIGGER_INSERT
  BEFORE INSERT ON
    ROLE
  FOR EACH ROW
    EXECUTE PROCEDURE LOG_INSERT_STAMPS();

CREATE TRIGGER TRIGGER_INSERT
  BEFORE INSERT ON
    ACCESS
  FOR EACH ROW
    EXECUTE PROCEDURE LOG_INSERT_STAMPS();

CREATE TRIGGER TRIGGER_INSERT
  BEFORE INSERT ON
    SUB_CATEGORY
  FOR EACH ROW
    EXECUTE PROCEDURE LOG_INSERT_STAMPS();

CREATE TRIGGER TRIGGER_INSERT
  BEFORE INSERT ON
    CATEGORY
  FOR EACH ROW
    EXECUTE PROCEDURE LOG_INSERT_STAMPS();

CREATE TRIGGER TRIGGER_INSERT
  BEFORE INSERT ON
    CATEGORY_DETAILS
  FOR EACH ROW
    EXECUTE PROCEDURE LOG_INSERT_STAMPS();

CREATE TRIGGER TRIGGER_INSERT
  BEFORE INSERT ON
    SOURCE
  FOR EACH ROW
    EXECUTE PROCEDURE LOG_INSERT_STAMPS();

CREATE TRIGGER TRIGGER_INSERT
  BEFORE INSERT ON
    QUESTION
  FOR EACH ROW
    EXECUTE PROCEDURE LOG_INSERT_STAMPS();

CREATE TRIGGER TRIGGER_INSERT
  BEFORE INSERT ON
    ANSWER
  FOR EACH ROW
    EXECUTE PROCEDURE LOG_INSERT_STAMPS();

CREATE TRIGGER TRIGGER_INSERT
  BEFORE INSERT ON
    SUB_QUESTION
  FOR EACH ROW
    EXECUTE PROCEDURE LOG_INSERT_STAMPS();

CREATE TRIGGER TRIGGER_INSERT
  BEFORE INSERT ON
    QUESTION_DETAILS
  FOR EACH ROW
    EXECUTE PROCEDURE LOG_INSERT_STAMPS();

CREATE TRIGGER TRIGGER_INSERT
  BEFORE INSERT ON
    ARTICLE
  FOR EACH ROW
    EXECUTE PROCEDURE LOG_INSERT_STAMPS();

CREATE TRIGGER TRIGGER_INSERT
  BEFORE INSERT ON
    REQUESTOR
  FOR EACH ROW
    EXECUTE PROCEDURE LOG_INSERT_STAMPS();

CREATE TRIGGER TRIGGER_INSERT
  BEFORE INSERT ON
    CONTACT
  FOR EACH ROW
    EXECUTE PROCEDURE LOG_INSERT_STAMPS();

CREATE TRIGGER TRIGGER_INSERT
  BEFORE INSERT ON
    KNOWLEDGE
  FOR EACH ROW
    EXECUTE PROCEDURE LOG_INSERT_STAMPS();
